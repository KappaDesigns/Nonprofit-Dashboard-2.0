Services

UI
Pages
Websockets?
Users
Events
Articles
Resources
Galleries
Version Control

Pages

- Analyze Page Differences
- Store CSS and JS
- Store HTML
- Get Pages
- Edit Pages

Websockets?
- Update pages?

Users

- Login
- Store Users
- Retrieve Users
- Edit Users
- Delete Users

Events

- CRUD Events
- Removing Old Events
- Updating Featured / Upcoming Events

Articles

- CRUD Articles
- Recommended Articles

Resources

- Manage Donations
- Manage other aspects of business

Galleries

- CRUD Galleries

Version Control

- cache all published versions of site
- accessible to roll back the site in case of break.

UI

- Pages error out if something looks long
- Display pages html after css loaded in
- Add JS after HTML
- All react, no jQuery please
- Focus on purity and re-usability
- Make sure that css is constant
- Make all editors in page
- Publish pages
- Navigate Pages

	UI Parts

	- Display HTML Page
	- Action Button
	- Event Editor
	- Gallery Editor
	- Article Editor
	- Page Navigator
	- Profile Editor
	- Slack Chat Page
	- Resource Page
	- Analytics Page (Google Analytics)
	- Page Version Previewer and Reversion

Goals

- Use Docker
- AWS
- Circle CI
- CD
- PGWA
- Write Tests
- Practice Chrome Debugger
- Learn to analyze Webpack builds
- Clean Javascript
- Lazy Load Code

=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=
															Schemas
=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=

Page Schema

{
	type: "page",
	id: 1,
	url: 'http://',
	html: {
		head: String,
		body: String,
	},
	dom: {
		html: AST,
		body: AST,
		head: AST,
	},
	js: {
		scripts: [
			{
				url: String,
				content: String,
			},
		],
	},
	css: {
		styles: [
			{
				url: String,
				content: String,
			},
		],
	},

}

User Schema:

{
	type: "user",
	id: 1,
	firstName: String,
	lastName: String,
	title: String,
	username: String,
	password: String,
	dateJoined: Date,
	lastLoggedIn: Date,
	email: String,
}

Event Schema

{
	type: "event",
	id: String,
	eventDate: Date,
	dateCreated: Date,
	dateEdited: Date,
	title: String,
	desc: String,
	urls: {
		articleLink: String,
		papperlessPostLink: String,
	}
}

Article Schema

{
	type: "article",
	id: String,
	dateCreated: Date,
	dateEdited: Date,
	title: String,
	author: String,
	sections: [
		{
			title: String,
			markdown: String,
			html: String,
		}
	]
}

Gallery Schema

{
	type: "gallery",
	id: String,
	dateCreated: Date,
	dateEdited: Date,
	title: String,
	images: [
		{
			actual: String,
			placeholder: String,
		}
	]
}

Version Control Schema

{
	type: "version",
	id: String,
	publisher: String,
	publishComment: String,
	date: Date,
	page: Page Schema [Compress with gzip and hpack algo],
}

=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=
															Algorithims
=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=

HTML Page returns new AST

- Tokenize Page
- Create AST
	{
		tag: String,

		type: Node | Text,
		attrs: [ Object ],
	}

HTML DIF returns new AST

- Take Children
- Check Length
	• Node Added
	• Node Removed
- Loop Children
  • pass to function that stringifies node
	• add string to array
- Check Array for Missing Nodes / New Nodes / Edited Nodes
 • Update AST
 • Change all nodes where stringID matches and set text to current text

=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=
 															Ideas
=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=

- Changes made on the client site show some UI that asks admin
 		panel users if they would like to see changes
- 
